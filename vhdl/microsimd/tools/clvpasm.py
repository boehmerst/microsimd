from pyparsing import *

#------------------------------------------------------------------------------------------------------
# CLASS ASSEMBLER 
#------------------------------------------------------------------------------------------------------
class Assembler(object):
    def __init__(self, args):
      
        formaterList = FormaterList()
        formaterList.registerComponent("bin", Binary_Formater)
        formaterList.registerComponent("vhdl", VHDL_Formater)
        formaterList.registerComponent("mem", MEM_Formater)
        formaterList.registerComponent("symboltable", SYMBOLTABLE_Formater)
        
        if len(args) != 4: 
            print
            print "usage: python clvpasm.py <format> <infilename> <outfilename>"
            print "   supported formats are: " + formaterList.getList()
            sys.exit(1)
        
        format = args[1]
        fileNameIn = args[2]
        fileNameOut = args[3]
            
        formater = formaterList.getFormater(format)
        
        if formater == None:
            print
            print "error: unsupported format, use one of the following: " + formaterList.getList()
            sys.exit(1)
        
        try:
            fileIn = open (fileNameIn,"r")
            programcode, symbols = Parser().parse(fileIn.readlines())
            fileIn.close()
        except IOError:
            print
            print "error: unable to open input file: " + fileNameIn
            sys.exit(1)
            
        try:
            formaterList.getFormater(format).write(programcode, symbols, fileNameOut)
            print "done"
        except IOError:
            print
            print "error: unable to write output file: " + fileNameOut
            sys.exit(1)
        
#------------------------------------------------------------------------------------------------------
# CLASS FORMATERLIST
#------------------------------------------------------------------------------------------------------
class FormaterList(object):
    def __init__(self): 
        self.components = []
  
    def getFormater(self, format):                                      
        for a in self.components:                                   
            if format.lower().lstrip().startswith(a[0].lower()):   
                return a[1]()
        
        return None;
        
    def getList(self):
        cmdlist = []
        for a in self.components:  
            cmdlist.append(a[0])
        
        return str(cmdlist)
        
    def registerComponent(self,format,component): 
        self.components.append([format,component])

#------------------------------------------------------------------------------------------------------
# CLASS VHDL_FORMATER
#------------------------------------------------------------------------------------------------------
class VHDL_Formater(object):
    def write(self, code, symbols, filename):
        
        #get last adress
        list = sorted(code.iteritems())
        list.reverse()
        end = list[0][0]
        
        f=open(filename,"w")
        
        f.write("-- ********************************************\n")
        f.write("-- * SRAM FILE GENERATED BY HiCoVec ASSEMBLER *\n")
        f.write("-- *  do not make modifications here          *\n")
        f.write("-- ********************************************\n\n")
        f.write("library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n")
        f.write("entity sram is\n\tport (\n\t\tclk_i : in std_ulogic;\n\t\twe_i : in std_ulogic;\n\t\ten_i : in std_ulogic;\n")
        f.write("\t\taddr_i : in std_ulogic_vector(31 downto 0);\n\t\tdi_i : in std_ulogic_vector(31 downto 0);\n")
        f.write("\t\tdo_o : out std_ulogic_vector(31 downto 0)\n\t);\nend sram;\n")
        f.write("architecture rtl of sram is\n")
        f.write("\ttype memory_type is array(0 to " + str(end+1) + ") of std_ulogic_vector(31 downto 0);\n")
        f.write("\tsignal memory : memory_type := (\n")
        
        for i in range(0,end+1):
            if code.has_key(i):
                f.write('\t\t"' + code[i][0] + '", -- ' + hex(i) + ' : ' +code[i][1] +'\n')
            else:
                f.write('\t\t"00000000000000000000000000000000", -- ' + hex(i)+'\n')
        
        f.write('\t\t"00000000000000000000000000000000"'+'\n')
        f.write('\t);'+'\n')
        
        f.write("begin\n\tprocess (clk_i)\n\tbegin\n\t\tif clk_i'event and clk_i = '1' then\n\t\t\tif en_i = '1' then\n")
        f.write("\t\t\t\tif we_i = '1' then\n\t\t\t\t\tmemory(to_integer(unsigned(addr_i))) <= di_i;\n\t\t\t\t\tdo_o <= di_i;\n")
        f.write("\t\t\t\telse\n\t\t\t\t\tdo_o <= memory(to_integer(unsigned(addr_i)));\n\t\t\t\tend if;\n\t\t\tend if;\n\t\tend if;\n")
        f.write("\tend process;\nend;\n")

        f.close()
        
        
#------------------------------------------------------------------------------------------------------
# CLASS BINARY_FORMATER
#------------------------------------------------------------------------------------------------------
class Binary_Formater(object):
    def write(self, code, symbols, filename):
        
        #get last adress
        list = sorted(code.iteritems())
        list.reverse()
        end = list[0][0]
        
        f=open(filename,"wb")
          
        for i in range(0,end+1):
            if code.has_key(i):
                value = string.atoi(code[i][0],2)
                m = string.atoi("11111111000000000000000000000000",2)
                for j in range(4):        
                    a = (value & m) >> 8 * (3-j)
                    m = m >> 8
                    f.write(chr(a))
            else:
                f.write(chr(0) + chr(0) + chr(0) + chr(0))
        f.close()
        
#------------------------------------------------------------------------------------------------------
# CLASS COE_FORMATER
#------------------------------------------------------------------------------------------------------
class COE_Formater(object):
    def write(self, code, symbols, filename):
        
        #get last adress
        list = sorted(code.iteritems())
        list.reverse()
        end = list[0][0]
        
        f=open(filename,"w")
        f.write("; COE FILE FOR XILINX CORE GENERATOR\n")
        f.write("; depth=" + str(end + 1) + ", and width=32\n")
        f.write(";\n")
        f.write("memory_initialization_radix=2;\n")
        f.write("memory_initialization_vector=\n")
        
        for i in range(0,end+1):
            if code.has_key(i):
                f.write(code[i][0] + ",\n")
            else:
                f.write("00000000000000000000000000000000,\n")
        
        f.write("00000000000000000000000000000000;\n")
        
        f.close()

#------------------------------------------------------------------------------------------------------
# CLASS MEM_FORMATTER (as used by modelsim)
#------------------------------------------------------------------------------------------------------
class MEM_Formater(object):
    def write(self, code, symbols, filename):
    
        list = sorted(code.iteritems())
        list.reverse()
        end = list[0][0]
    
        f=open(filename,"w")
        f.write("// memory data file (do not edit the following line - required for mem load use)\n")
        f.write("// format=bin addressradix=b dataradix=b version=1.0 wordsperline=1\n")
    
        for i in range(0,end+1):
            if code.has_key(i):
                f.write(code[i][0] + ' //' + hex(4*i) + ' : ' + code[i][1] +'\n')
            else:
                f.write("00000000000000000000000000000000" + '  //' + hex(4*i) + '\n')
        f.write('\n')
        f.close()

#------------------------------------------------------------------------------------------------------
# CLASS SYMBOLTABLE_FORMATER
#------------------------------------------------------------------------------------------------------
class SYMBOLTABLE_Formater(object):
    def write(self, code, symbols,  filename):
        
        f=open(filename,"w")
        
        for sym, addr in sorted(symbols.iteritems()):
            f.write(str(addr) + ":"  + str(sym) + "\n")
        
        f.close()


#------------------------------------------------------------------------------------------------------
# CLASS INSTRUCTION
#------------------------------------------------------------------------------------------------------        
class Instruction(object):
    def __init__(self):
        self.bincode = []
        for i in range(32):
            self.bincode.append("0")
    
    def revert(self,value):
        result = ""
        for i in range(len(value),0,-1):
            result = result + value[i-1]
        return result
        
    def insert(self, start, end, value):
        for i in range (start+1, end, -1):
            self.bincode[i-1] = self.revert(value)[i-1-end]
    
    def tostring(self):
        result = ""
        for i in range(32,0, -1):
            result = result + self.bincode[i-1]
        return result
    
    def tobinary(self,n):
        b = ""
        if n == 0:
            b= "0"
        else:
            while n > 0:
                b = str(n % 2) + b
                n = n >> 1
        return b
    
    def insertImmediate(self, n):
        self.insert(15,0,self.tobinary(n).rjust(16,"0"))
    
    def insertConstant(self, n):
        self.insert(31,0,self.tobinary(n).rjust(32,"0"))
        
    def insertD(self,d):
        self.insert(25,21,self.tobinary(d).rjust(5,"0"))
        
    def insertA(self,a):
        self.insert(20,16,self.tobinary(a).rjust(5,"0"))
    
    def insertB(self,b):
        self.insert(15,11,self.tobinary(b).rjust(5,"0"))
        
    def insertVD(self,vd):
        self.insert(15,12,self.tobinary(vd % 16).rjust(4,"0"))
        self.insert(22,22,self.tobinary(vd >> 4).rjust(1,"0"))

    def insertVA(self,va):
        self.insert(19,16,self.tobinary(va % 16).rjust(4,"0"))
        self.insert( 7, 7,self.tobinary(va >> 4).rjust(1,"0"))      
        
    def insertVB(self,vb):
        self.insert( 3, 0,self.tobinary(vb % 16).rjust(4,"0"))
        self.insert( 5, 5,self.tobinary(vb >> 4).rjust(1,"0"))
    
        
#------------------------------------------------------------------------------------------------------
# CLASS PARSER
#------------------------------------------------------------------------------------------------------
class Parser:
    def tointeger(self,s):
    
        if s[0] == "$":
            return string.atoi(s[1:], base = 16)
        
        if s[0] == "%":
            return string.atoi(s[1:], base = 2)
            
        if s[0] == "R" or s[0] == "V":
            return string.atoi(s[1:])      
        
        return string.atoi(s)
    
    def parse(self, program):
        
        #create parsed commandlist
        errorcounter = 0
        commands = []
        linenr = 0
        
        for line in program:
            linenr = linenr + 1
            line = line.strip().upper()
            
            try:
                result = LineParser().parseLine(line)
                if result.dcommand or result.command or result.v3rslcmd or result.v3rdlcmd or result.v2rsacmd or result.vtranscmd or result.vldstcmd or result.shuffle_cmd:
                    commands.append((result, linenr))
            
            except ParseException, err:
                print
                print "conflict in line " + str(linenr) + ":"
                print line
                print " "*err.loc + "^ " + "parse error"
                errorcounter = errorcounter + 1
        
        #create symbol table, assign adresses, detect conflicts
        symbols = {}
        program = {}
        
        address = 0
        
        for cmd, linenr in commands:
            if cmd.dcommand == "ORG":
                address = self.tointeger(cmd.address)
            
            if cmd.dcommand == "EQU":              
                if symbols.has_key(cmd.symbol):
                    print
                    print "conflict in line " + str(linenr) + ":"
                    print "=> symbol " + cmd.symbol + " has already been defined" 
                    errorcounter = errorcounter + 1
                else:
                    symbols[cmd.symbol] = self.tointeger(cmd.value)
                
            if cmd.label:
                if symbols.has_key(cmd.label[0]):
                    print
                    print "conflict in line " + str(linenr) + ":"
                    print "=> symbol " + cmd.label[0] + " has already been defined" 
                    errorcounter = errorcounter + 1
                else:
                    symbols[cmd.label[0]] = address
                
            if cmd.dcommand != "ORG" and cmd.dcommand != "EQU":
                if program.has_key(address):
                    print
                    print "conflict in line " + str(linenr) + ":"
                    print "=> memory address " + hex(address) + " is already in use" 
                    errorcounter = errorcounter + 1

                # 4 byte -> 1 double word
                program [address/4] = (cmd, linenr)
                address = address + 4
        
        
        #translate into machine program
        code = {}
        
        for addr, prg in sorted(program.iteritems()):
            cmd = prg[0]
            linenr = prg[1]
            
            immediate = 0

            if cmd.immediate:
                try:
                    if cmd.value:
                        immediate = self.tointeger(cmd.value)
                    else:
                        immediate = symbols[cmd.symbol]
                except KeyError:
                    print
                    print "conflict in line " + str(linenr) + ":"
                    print "=> symbol " + cmd.symbol + " not declared"
                    errorcounter = errorcounter + 1
                
                if immediate > 65535:
                    print
                    print "conflict in line " + str(linenr) + ":"
                    print "=> immediate value " + cmd.immediate +" (" + hex(immediate) + ") is out of range (max = 0xFFFF)"
                    errorcounter = errorcounter + 1

            dregister  = cmd.dregister
            aregister  = cmd.aregister
            bregister  = cmd.bregister
            vdregister = cmd.vdregister
            varegister = cmd.varegister
            vbregister = cmd.vbregister            

            if dregister:
                if self.tointeger(dregister) > Settings().getR()-1:
                    print
                    print "conflict in line " + str(linenr) + ":"
                    print "=> register (" + dregister + ") is out of range (R0..R"+ str(Settings().getR()-1) + ")"
                    errorcounter = errorcounter + 1

            if aregister:
                if self.tointeger(aregister) > Settings().getR()-1:
                    print
                    print "conflict in line " + str(linenr) + ":"
                    print "=> register (" + aregister + ") is out of range (R0..R"+ str(Settings().getR()-1) + ")"
                    errorcounter = errorcounter + 1

            if bregister:
                if self.tointeger(bregister) > Settings().getR()-1:
                    print
                    print "conflict in line " + str(linenr) + ":"
                    print "=> register (" + bregister + ") is out of range (R0..R"+ str(Settings().getR()-1) + ")"
                    errorcounter = errorcounter + 1
 
            if vdregister:
                if cmd.reg_width == "W":
                    if self.tointeger(vdregister) > Settings().getW()-1:
                        print
                        print "conflict in line " + str(linenr) + ":"
                        print "=> register (" + vdregister + ") is out of range (R0..R"+ str(Settings().getW()-1) + ")"
                        errorcounter = errorcounter + 1
                elif cmd.reg_width == "N":
                    if self.tointeger(vdregister) > Settings().getN()-1:
                        print
                        print "conflict in line " + str(linenr) + ":"
                        print "=> register (" + vdregister + ") is out of range (R0..R"+ str(Settings().getN()-1) + ")"
                        errorcounter = errorcounter + 1
                elif self.tointeger(vdregister) > Settings().getW()-1:
                    print "ping"
                    print "conflict in line " + str(linenr) + ":"
                    print "=> register (" + vdregister + ") is out of range (R0..R"+ str(Settings().getW()-1) + ")"
                    
            if varegister:
                if cmd.reg_width == "W":
                    if self.tointeger(varegister) > Settings().getW()-1:
                        print
                        print "conflict in line " + str(linenr) + ":"
                        print "=> register (" + varegister + ") is out of range (R0..R"+ str(Settings().getW()-1) + ")"
                        errorcounter = errorcounter + 1
                elif cmd.reg_width == "N":
                    if self.tointeger(varegister) > Settings().getN()-1:
                        print
                        print "conflict in line " + str(linenr) + ":"
                        print "=> register (" + varegister + ") is out of range (R0..R"+ str(Settings().getN()-1) + ")"
                        errorcounter = errorcounter + 1
                elif self.tointeger(varegister) > Settings().getW()-1:
                    print "ping"
                    print "conflict in line " + str(linenr) + ":"
                    print "=> register (" + varegister + ") is out of range (R0..R"+ str(Settings().getW()-1) + ")"
                    
            if vbregister:
                if cmd.reg_width == "W":
                    if self.tointeger(vbregister) > Settings().getW()-1:
                        print
                        print "conflict in line " + str(linenr) + ":"
                        print "=> register (" + vbregister + ") is out of range (R0..R"+ str(Settings().getW()-1) + ")"
                        errorcounter = errorcounter + 1
                elif cmd.reg_width == "N":
                    if self.tointeger(vbregister) > Settings().getN()-1:
                        print
                        print "conflict in line " + str(linenr) + ":"
                        print "=> register (" + vbregister + ") is out of range (R0..R"+ str(Settings().getN()-1) + ")"
                        errorcounter = errorcounter + 1
                elif self.tointeger(vbregister) > Settings().getW()-1:
                    print "ping"
                    print "conflict in line " + str(linenr) + ":"
                    print "=> register (" + vbregister + ") is out of range (R0..R"+ str(Settings().getW()-1) + ")"   
            
            i = Instruction()
            
            regcommand         = False
            immcommand         = False
            shiftcommand       = False

                    
            if cmd.dcommand == "DC":
                i.insertConstant(self.tointeger(cmd.address))
                
            #------------------------------------------------------------------------------------------
            # NOP (translates to ADD R0, R0, R0)
            #------------------------------------------------------------------------------------------
            if cmd.command == "NOP":
                i.insert(31, 0, "00000000000000000000000000000000")
                
            #------------------------------------------------------------------------------------------
            # scalar reg commands
            #------------------------------------------------------------------------------------------
            if cmd.command == "ADD":
                regcommand = True
                i.insert(31, 26, "000000")
                i.insert(10, 0, "00000000000")
                
            if cmd.command == "RSUB":
                regcommand = True
                i.insert(31, 26, "000001")
                i.insert(10, 0, "00000000000")
            
            if cmd.command == "ADDC":
                regcommand = True
                i.insert(31, 26, "000010")
                i.insert(10, 0, "00000000000")
                
            if cmd.command == "RSUBC":
                regcommand = True
                i.insert(31, 26, "000011")
                i.insert(10, 0, "00000000000")
                              
            if cmd.command == "ADDK":
                regcommand = True
                i.insert(31, 26, "000100")
                i.insert(10, 0, "00000000000")
                
            if cmd.command == "RSUBK":
                regcommand = True
                i.insert(31, 26, "000101")
                i.insert(10, 0, "00000000000") 
                
            if cmd.command == "ADDKC":
                regcommand = True
                i.insert(31, 26, "000110")
                i.insert(10, 0, "00000000000")                  

            if cmd.command == "RSUBKC":
                regcommand = True
                i.insert(31, 26, "000111")
                i.insert(10, 0, "00000000000")
                   
            if cmd.command == "CMP":
                regcommand = True
                i.insert(31, 26, "000101")
                i.insert(10, 0, "00000000001")
                                
            if cmd.command == "CMPU":
                regcommand = True
                i.insert(31, 26, "000101")
                i.insert(10, 0, "00000000011")
                
            if cmd.command == "OR":
                regcommand = True
                i.insert(31, 26, "100000")
                i.insert(10, 0, "00000000000")  
                
            if cmd.command == "AND":
                regcommand = True
                i.insert(31, 26, "100001")
                i.insert(10, 0, "00000000000")     
                
            if cmd.command == "XOR":
                regcommand = True
                i.insert(31, 26, "100010")
                i.insert(10, 0, "00000000000")     
                
            if cmd.command == "ANDN":
                regcommand = True
                i.insert(31, 26, "100011")
                i.insert(10, 0, "00000000000")          
                
            #------------------------------------------------------------------------------------------
            # scalar imm commands
            #------------------------------------------------------------------------------------------               
            if cmd.command == "ADDI":
                immcommand = True
                i.insert(31, 26, "001000")
                       
            if cmd.command == "RSUBI":
                immcommand = True
                i.insert(31, 26, "001001")
                
            if cmd.command == "ADDIC":
                immcommand = True
                i.insert(31, 26, "001010")
                
            if cmd.command == "RSUBIC":
                immcommand = True
                i.insert(31, 26, "001011")
                
            if cmd.command == "ADDIK":
                immcommand = True
                i.insert(31, 26, "001100")
                
            if cmd.command == "RSUBIK":
                immcommand = True
                i.insert(31, 26, "001101")
                
            if cmd.command == "ADDIKC":
                immcommand = True
                i.insert(31, 26, "001110")         
                
            if cmd.command == "RSUBIKC":
                immcommand = True
                i.insert(31, 26, "001111")
                
            if cmd.command == "ORI":
                immcommand = True
                i.insert(31, 26, "101000")
                
            if cmd.command == "ANDI":
                immcommand = True
                i.insert(31, 26, "101001")
                
            if cmd.command == "XORI":
                immcommand = True
                i.insert(31, 26, "101010")
                                
            if cmd.command == "ANDNI":
                immcommand = True
                i.insert(31, 26, "101011")           
                
            #------------------------------------------------------------------------------------------
            # MUL, BS, DIV commands
            #------------------------------------------------------------------------------------------
            if cmd.command == "MUL":
                regcommand = True
                i.insert(31, 26, "010000")
                i.insert(10, 0, "00000000000")
                        
            if cmd.command == "BSRL":
                regcommand = True
                i.insert(31, 26, "010001")
                i.insert(10, 0, "00000000000")          
                
            if cmd.command == "BSRA":
                regcommand = True
                i.insert(31, 26, "010001")
                i.insert(10, 0, "01000000000")
                
            if cmd.command == "BSLL":
                regcommand = True
                i.insert(31, 26, "010001")
                i.insert(10, 0, "10000000000")        
                
            if cmd.command == "MULI":
                immcommand = True
                i.insert(31, 26, "011000")
                
            if cmd.command == "IDIV":
                regcommand = True
                i.insert(31, 26, "010010")                        
                i.insert(10, 0, "00000000000")
                                               
            if cmd.command == "IDIVU":
                regcommand = True
                i.insert(31, 26, "010010")                        
                i.insert(10, 0, "00000000001")
                
            if cmd.command == "BSRLI":
                immcommand = True
                i.insert(31, 26, "011001")
                i.insert(15, 5, "00000000000")   
                
            if cmd.command == "BSRAI":
                i.insert(31, 26, "011001")
                i.insertImmediate(immediate)  
                i.insert(15, 5, "00000010000")        
                
            if cmd.command == "BSRAI":
                i.insert(31, 26, "011001") 
                i.insertImmediate(immediate)             
                i.insert(15, 5, "00000100000")
                 
            #------------------------------------------------------------------------------------------
            # load-store reg commands
            #------------------------------------------------------------------------------------------     
            if cmd.command == "LBU":
                regcommand = True
                i.insert(31, 26, "110000")
                i.insert(10, 0, "00000000000") 
                 
            if cmd.command == "LHU":
                regcommand = True
                i.insert(31, 26, "110001")
                i.insert(10, 0, "00000000000")
                 
            if cmd.command == "LW":
                regcommand = True
                i.insert(31, 26, "110010")
                i.insert(10, 0, "00000000000")
                 
            if cmd.command == "SB":
                regcommand = True
                i.insert(31, 26, "110100")
                i.insert(10, 0, "00000000000")   
                 
            if cmd.command == "SH":
                regcommand = True
                i.insert(31, 26, "110101")
                i.insert(10, 0, "00000000000")
                
            if cmd.command == "SW":
                regcommand = True
                i.insert(31, 26, "110110")
                i.insert(10, 0, "00000000000")
                
            #------------------------------------------------------------------------------------------
            # load-store imm commands
            #------------------------------------------------------------------------------------------      
            if cmd.command == "LBUI":
                immcommand = True
                i.insert(31, 26, "111000")
                
            if cmd.command == "LHUI":
                immcommand = True
                i.insert(31, 26, "111001")
                
            if cmd.command == "LHUI":
                immcommand = True
                i.insert(31, 26, "111001")

            if cmd.command == "LWI":
                immcommand = True
                i.insert(31, 26, "111010")

            if cmd.command == "SBI":
                immcommand = True
                i.insert(31, 26, "111100")

            if cmd.command == "SHI":
                immcommand = True
                i.insert(31, 26, "111101")

            if cmd.command == "SWI":
                immcommand = True
                i.insert(31, 26, "111110")
                
            #------------------------------------------------------------------------------------------
            # shift, sext commands
            #------------------------------------------------------------------------------------------
            if cmd.command == "SRA":
                shiftcommand = True
                i.insert(31, 26, "100100")
                i.insert(15, 0, "0000000000000001")

            if cmd.command == "SRC":
                shiftcommand = True
                i.insert(31, 26, "100100")
                i.insert(15, 0, "0000000000100001")
                
            if cmd.command == "SRL":
                shiftcommand = True
                i.insert(31, 26, "100100")
                i.insert(15, 0, "0000000001000001")
                
            if cmd.command == "SEXT8":
                shiftcommand = True
                i.insert(31, 26, "100100")
                i.insert(15, 0, "0000000001100000")
                
            if cmd.command == "SEXT16":
                shiftcommand = True
                i.insert(31, 26, "100100")
                i.insert(15, 0, "0000000001100001")
            
            #------------------------------------------------------------------------------------------
            # imm command
            #------------------------------------------------------------------------------------------
            if cmd.command == "IMM":
                i.insert(31, 26, "101100")
                i.insert(25, 16, "0000000000")
                i.insertImmediate(immediate)
                
            #------------------------------------------------------------------------------------------
            # jump commands
            #------------------------------------------------------------------------------------------
            if cmd.command == "BR":
                i.insert(31, 26, "100110")
                i.insert(25, 16, "0000000000")
                i.insert(10, 0, "00000000000")
                i.insertB(self.tointeger(cmd.bregister))
                
            if cmd.command == "BRD":
                i.insert(31, 26, "100110")
                i.insert(25, 16, "0000010000")
                i.insert(10, 0, "00000000000")
                i.insertB(self.tointeger(cmd.bregister))          
                
            if cmd.command == "BRLD":
                i.insert(31, 26, "100110")
                i.insert(20, 16, "10100")
                i.insert(10, 0, "00000000000")
                i.insertB(self.tointeger(cmd.bregister))
                i.insertD(self.tointeger(cmd.dregister))
                
            if cmd.command == "BRAD":
                i.insert(31, 26, "100110")
                i.insert(25, 16, "0000011000")
                i.insert(10, 0, "00000000000")
                i.insertB(self.tointeger(cmd.bregister))      
                
            if cmd.command == "BRALD":
                i.insert(31, 26, "100110")
                i.insert(20, 16, "11100")
                i.insert(10, 0, "00000000000")
                i.insertB(self.tointeger(cmd.bregister))
                i.insertD(self.tointeger(cmd.dregister))
                
            if cmd.command == "BRK":
                i.insert(31, 26, "100110")
                i.insert(20, 16, "01100")
                i.insert(10, 0, "00000000000")
                i.insertB(self.tointeger(cmd.bregister))
                i.insertD(self.tointeger(cmd.dregister))
                
            if cmd.command == "BEQ":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "00000")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))
                
            if cmd.command == "BNE":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "00001")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))
                
            if cmd.command == "BLT":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "00010")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))  
                
            if cmd.command == "BLE":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "00011")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))
                
            if cmd.command == "BGT":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "00100")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))
                
            if cmd.command == "BGE":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "00101")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))  
                
            if cmd.command == "BEQD":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "10000")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))   
                
            if cmd.command == "BNED":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "10001")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))  
                
            if cmd.command == "BLTD":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "10010")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))   
                
            if cmd.command == "BLED":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "10011")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))      
                
            if cmd.command == "BGTD":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "10100")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))  
                
            if cmd.command == "BGED":
                i.insert(31, 26, "100111")      
                i.insert(25, 21, "10101")
                i.insert(10, 0, "00000000000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertB(self.tointeger(cmd.bregister))      
                
            if cmd.command == "RTSD":
                i.insert(31, 26, "101101")      
                i.insert(25, 21, "10000")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertImmediate(immediate)
                
            if cmd.command == "RTID":
                i.insert(31, 26, "101101")      
                i.insert(25, 21, "10001")
                i.insert(10, 0, "00000000000")
                i.insertImmediate(immediate)

            if cmd.command == "RTED":
                i.insert(31, 26, "101101")      
                i.insert(25, 21, "10010")
                i.insertA(self.tointeger(cmd.aregister))
                i.insertImmediate(immediate)

            if cmd.command == "RTBD":
                i.insert(31, 26, "101101")      
                i.insert(25, 21, "10010")                 # ???
                i.insertA(self.tointeger(cmd.aregister))
                i.insertImmediate(immediate)

            if cmd.command == "BRI":
                i.insert(31, 26, "101110")      
                i.insert(25, 21, "00000")
                i.insert(20, 16, "00000")
                i.insertImmediate(immediate)

            if cmd.command == "BRID":
                i.insert(31, 26, "101110")      
                i.insert(25, 21, "00000")
                i.insert(20, 16, "10000")
                i.insertImmediate(immediate)

            if cmd.command == "BRLID":
                i.insert(31, 26, "101110")      
                i.insert(20, 16, "10100")
                i.insertImmediate(immediate)
                i.insertD(self.tointeger(cmd.dregister))

            if cmd.command == "BRAI":
                i.insert(31, 26, "101110")      
                i.insert(25, 21, "00000")
                i.insert(20, 16, "01000")
                i.insertImmediate(immediate)

            if cmd.command == "BRAID":
                i.insert(31, 26, "101110")      
                i.insert(25, 21, "00000")
                i.insert(20, 16, "11000")
                i.insertImmediate(immediate)

            if cmd.command == "BRALID":
                i.insert(31, 26, "101110")      
                i.insert(20, 16, "11100")
                i.insertImmediate(immediate)
                i.insertD(self.tointeger(cmd.dregister))

            if cmd.command == "BRKI":
                i.insert(31, 26, "101110")      
                i.insert(20, 16, "01100")
                i.insertImmediate(immediate)
                i.insertD(self.tointeger(cmd.dregister))

            if cmd.command == "BEQI":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "00000")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))                 

            if cmd.command == "BNEI":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "00001")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BLTI":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "00010")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BLEI":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "00011")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BGTI":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "00100")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BGEI":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "00101")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BEQID":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "10000")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BNEID":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "10001")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BLTID":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "10010")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BLEID":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "10011")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BGTID":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "10100")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))

            if cmd.command == "BGEID":
                i.insert(31, 26, "101111")
                i.insert(25, 21, "10101")
                i.insertImmediate(immediate)
                i.insertA(self.tointeger(cmd.aregister))
                
            #------------------------------------------------------------------------------------------
            # MSR commands
            #------------------------------------------------------------------------------------------
            if cmd.command == "MSRCLR":
                i.insert(31, 26, "100101")
                i.insert(20, 16, "00001")
                i.insertD(self.tointeger(cmd.dregister))
                i.insertImmediate(immediate)
                i.insert(15, 14, "00")
                
            if cmd.command == "MSRSET":
                i.insert(31, 26, "100101")
                i.insert(20, 16, "00000")
                i.insertD(self.tointeger(cmd.dregister))
                i.insertImmediate(immediate)
                i.insert(15, 14, "00")       
                
            if regcommand == True:
                # SUB RD, RA, RB gets RSUB RD, RB, RA
                if cmd.command == "SUB":
                  i.insertD(self.tointeger(cmd.dregister))
                  i.insertA(self.tointeger(cmd.bregister))
                  i.insertB(self.tointeger(cmd.aregister))
                else:
                  i.insertD(self.tointeger(cmd.dregister))
                  i.insertA(self.tointeger(cmd.aregister))
                  i.insertB(self.tointeger(cmd.bregister))
                
            if immcommand == True:
                i.insertD(self.tointeger(cmd.dregister))
                i.insertA(self.tointeger(cmd.aregister))
                i.insertImmediate(immediate)
            
            #------------------------------------------------------------------------------------------
            # vector command (three register of the same length)
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd:
                i.insert(31, 26, "010111")    # vector opcode
                i.insert(25, 25, "1")         # class arith
                i.insert(23, 23, "0")         # instruction type
                i.insertVD(self.tointeger(cmd.vdregister))
                i.insertVA(self.tointeger(cmd.varegister))
                i.insertVB(self.tointeger(cmd.vbregister))
                
                if cmd.size:
                    i.insert(21, 20, i.tobinary(self.tointeger(cmd.size)/8 >> 1).rjust(2,"0"))
                else:
                    i.insert(21, 20, "10")
                
                if cmd.reg_width:
                    if cmd.reg_width == "W":
                        i.insert( 6, 6, "1")
                    else:
                        i.insert( 6, 6, "0")
                else:
                    i.insert( 6, 6, "1")
            
            #------------------------------------------------------------------------------------------
            # VADD
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VADD":
                i.insert(11,  8, "1000")
                i.insert(24, 24, "0")
                
            #------------------------------------------------------------------------------------------
            # VSUB
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VSUB":
                i.insert(11,  8, "1000")
                i.insert(24, 24, "1")
                
            #------------------------------------------------------------------------------------------
            # VAND
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VAND":
                i.insert(11,  8, "0001")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "0")
                i.insert(21, 20, "00")
                
            #------------------------------------------------------------------------------------------
            # VANDN
            #------------------------------------------------------------------------------------------  
            if cmd.v3rslcmd == "VAND" or cmd.v3rslcmd == "VBIC":
                i.insert(11,  8, "0001")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "0")
                i.insert(21, 20, "01")
                
            #------------------------------------------------------------------------------------------
            # VOR
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VOR":
                i.insert(11,  8, "0001")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "0")
                i.insert(21, 20, "10")
                
            #------------------------------------------------------------------------------------------
            # VORN
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VORN":
                i.insert(11,  8, "0001")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "0")
                i.insert(21, 20, "11")
                
            #------------------------------------------------------------------------------------------
            # VXOR
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VXOR":
                i.insert(11,  8, "0001")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "1")
                i.insert(21, 20, "00")
                
            #------------------------------------------------------------------------------------------
            # VBSL
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VBSL":
                i.insert(11,  8, "0001")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "1")
                i.insert(21, 20, "01")
                
            #------------------------------------------------------------------------------------------
            # VBIT
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VBIT":
                i.insert(11,  8, "0001")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "1")
                i.insert(21, 20, "10")
                
            #------------------------------------------------------------------------------------------
            # VBIF
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VBIF":
                i.insert(11,  8, "0001")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "1")
                i.insert(21, 20, "11")
                
            #------------------------------------------------------------------------------------------
            # VQADD
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VQADD":
                i.insert(11, 8, "0000")
 
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
                    
            #------------------------------------------------------------------------------------------
            # VQSUB
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VQSUB":
                i.insert(11, 8, "0010")
 
                if cmd.dt == "U":
                    i.insert(24, 24, "1")            
 
            #------------------------------------------------------------------------------------------
            # VSHL
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VSHL":
                i.insert(11, 8, "0100")
                i.insert( 4, 4, "0")
                
                if cmd.size:
                    i.insert(21, 20, i.tobinary(self.tointeger(cmd.size)/8 >> 1).rjust(2,"0"))
                else:
                    i.insert(21, 20, "10")
                
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
            
            #------------------------------------------------------------------------------------------
            # VQSL
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VQSHL":
                i.insert(11, 8, "0100")
                i.insert( 4, 4, "1")
                         
                if cmd.size:
                    i.insert(21, 20, i.tobinary(self.tointeger(cmd.size)/8 >> 1).rjust(2,"0"))
                else:
                    i.insert(21, 20, "10")
                
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
                  
            #------------------------------------------------------------------------------------------
            # VPADD
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VPADD":
                i.insert(11,  8, "1011")
                i.insert( 4,  4, "1")
                i.insert(24, 24, "0")
                
                if cmd.size == "32":
                    print "data size " + cmd.size + "not supported for command " + cmd.v3rslcmd
                    
            #------------------------------------------------------------------------------------------
            # VMUL
            #------------------------------------------------------------------------------------------
            if cmd.v3rslcmd == "VMUL":
                i.insert(11,  8, "1001")
                i.insert( 4,  4, "1")
                
                if cmd.dt == "U":
                    i.insert(24, 24, "1")

                if cmd.size == "32":
                    print "data size " + cmd.size + "not supported for command " + cmd.v3rslcmd
                    
            #------------------------------------------------------------------------------------------
            # VMADD
            #------------------------------------------------------------------------------------------                    
            if cmd.v3rslcmd == "VMADD":
                i.insert(11,  8, "1001")                   
                i.insert( 4,  4, "0")
                i.insert(24, 24, "0")
                
                if cmd.dt == "U":
                    print "data type U not supported for command " + cmd.v3rslcmd
                    
            #------------------------------------------------------------------------------------------
            # VMSUB
            #------------------------------------------------------------------------------------------                    
            if cmd.v3rslcmd == "VMSUB":
                i.insert(11,  8, "1001")                   
                i.insert( 4,  4, "0")
                i.insert(24, 24, "1")
                
                if cmd.dt == "U":
                    print "data type U not supported for command " + cmd.v3rslcmd                    
                
            
            #------------------------------------------------------------------------------------------
            # vector command (three register of different length)
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd:
                i.insert(31, 26, "010111")    # vector opcode
                i.insert(25, 25, "1")         # class arith
                i.insert(23, 23, "1")         # instruction type
                i.insert( 6,  6, "0")
                i.insert( 4,  4, "0")
                
                i.insertVD(self.tointeger(cmd.vdregister))
                i.insertVA(self.tointeger(cmd.varegister))
                i.insertVB(self.tointeger(cmd.vbregister))
                
                if cmd.size:
                    i.insert(21, 20, i.tobinary(self.tointeger(cmd.size)/8 >> 1).rjust(2,"0"))
               
            #------------------------------------------------------------------------------------------
            # VADDL
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VADDL":
                i.insert(11,  9, "000")
                i.insert( 8,  8, "0")
                
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
                    
                if cmd.size == "32":
                    print "data size " + cmd.size + "not supported for command " + cmd.v3rdlcmd
            
            #------------------------------------------------------------------------------------------
            # VADDW
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VADDW":
                i.insert(11,  9, "000")
                i.insert( 8,  8, "1")
                
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
                    
                if cmd.size == "32":
                    print "data size " + cmd.size + "not supported for command " + cmd.v3rdlcmd
                
            #------------------------------------------------------------------------------------------
            # VSUBL
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VSUBL":
                i.insert(11,  9, "001")
                i.insert( 8,  8, "0")
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
                    
                if cmd.size == "32":
                    print "data size " + cmd.size + "not supported for command " + cmd.v3rdlcmd
            
            #------------------------------------------------------------------------------------------
            # VSUBW
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VSUBW":
                i.insert(11,  9, "001")
                i.insert( 8,  8, "1")
                
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
                    
                if cmd.size == "32":
                    print "data size " + cmd.size + "not supported for command " + cmd.v3rdlcmd
            #------------------------------------------------------------------------------------------
            # VADDHN
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VADDHN":
                i.insert(11,  8, "0100")
                i.insert(24, 24, "0")
                
                if cmd.size == "16":
                    i.insert(21, 20, "00")
                elif cmd.size == "32":
                    i.insert(21, 20, "01")
                else:
                    print "data size " + cmd.size + "not supported for command " + cmd.v3rdlcmd
            
            #------------------------------------------------------------------------------------------
            # VSUBHN
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VADDHN":
                i.insert(11,  8, "0110")
                i.insert(24, 24, "0")
                
                if cmd.size == "16":
                    i.insert(21, 20, "00")
                elif cmd.size == "32":
                    i.insert(21, 20, "01")
                else:
                    print "data size " + cmd.size + "not supported for command " + cmd.v3rdlcmd
                    
            #------------------------------------------------------------------------------------------
            # VMULL
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VMULL":
                i.insert(11,  8, "1100")
                
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
                    
            #------------------------------------------------------------------------------------------
            # VMADDL
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VMADDL":
                 i.insert(11,  8, "1000")
                 
                 if cmd.dt == "U":
                     i.insert(24, 24, "1")
            
            #------------------------------------------------------------------------------------------
            # VMADDL
            #------------------------------------------------------------------------------------------
            if cmd.v3rdlcmd == "VMSUBL":
                 i.insert(11,  8, "1010")
                 
                 if cmd.dt == "U":
                     i.insert(24, 24, "1")
     
            #------------------------------------------------------------------------------------------
            # vector command (two register and a shift amount)
            #------------------------------------------------------------------------------------------
            if cmd.v2rsacmd:
                i.insert(31, 26, "010111")    # vector opcode
                i.insert(25, 25, "1")         # class arith
                i.insert(23, 23, "1")         # instruction type
                i.insert( 4,  4, "1")
                
                i.insertVD(self.tointeger(cmd.vdregister))
                i.insertVB(self.tointeger(cmd.vbregister))
                i.insert(21, 16, immediate)
                
                if cmd.reg_width:
                    if cmd.reg_width == "W":
                        i.insert( 6, 6, "1")
                    else:
                        i.insert( 6, 6, "0")
                else:
                    i.insert( 6, 6, "1")
                
                if(cmd.size == "8"):
                    i.insert(21, 19, "001")
                elif(cmd.size == "16"):
                    i.insert(21, 20, "01")
                else:
                    i.insert(21, 21, "1")
                         
            #------------------------------------------------------------------------------------------
            # VSHRI
            #------------------------------------------------------------------------------------------
            if cmd.v2rsacmd == "VSHRI":
                i.insert(11,  8, "0000")
                
                if cmd.dt == "S":
                    i.insert(24, 24, "0")
                else:
                    i.insert(24, 24, "1")
                
            #------------------------------------------------------------------------------------------
            # VSHRNI
            #------------------------------------------------------------------------------------------
            if cmd.v2rsacmd == "VSHRNI":
                i.insert(11,  8, "1000")
                i.insert(24, 24, "0")
                
                if cmd.size == "16":
                    i.insert(21, 19, "001")
                elif cmd.size == "32":
                    i.insert(21, 20, "01")
                else:
                    print "data size " + cmd.size + "not supported for command " + cmd.v2rsacmd
                
            #------------------------------------------------------------------------------------------
            # VQSHRNI
            #------------------------------------------------------------------------------------------
            if cmd.v2rsacmd == "VQSHRNI":
                i.insert(11,  9, "100")
                
                if cmd.dt == S:
                    i.insert( 8,  8, "1")
                    i.insert(24, 24, "0")
                else:
                    i.insert( 8,  8, "1")
                    i.insert(24, 24, "1")
                    
                if cmd.size == "16":
                    i.insert(21, 19, "001")
                elif cmd.size == "32":
                    i.insert(21, 20, "01")
                else:
                    print "data size " + cmd.size + "not supported for command " + cmd.v2rsacmd
            
            #------------------------------------------------------------------------------------------
            # VQSHRNUI
            #------------------------------------------------------------------------------------------
            if cmd.v2rsacmd == "VQSHRNUI":
                i.insert(11,  9, "100")
                
                if cmd.dt == S:
                    i.insert( 8,  8, "0")
                    i.insert(24, 24, "1")
                else:
                    print
                    print "type " + cmd.dt + "is not allowed for " + cmd.v2rsacmd
                    
                if cmd.size == "16":
                    i.insert(21, 19, "001")
                elif cmd.size == "32":
                    i.insert(21, 20, "01")
                else:
                    print "data size cmd.size not supported for command " + cmd.v2rsacmd
            
            #------------------------------------------------------------------------------------------
            # VSHLI
            #------------------------------------------------------------------------------------------
            if cmd.v2rsacmd == "VSHLI":
                i.insert(11,  8, "0101")
            
            #------------------------------------------------------------------------------------------
            # VQSHLI
            #------------------------------------------------------------------------------------------         
            if cmd.v2rsacmd == "VQSHLI":
                i.insert(11,  9, "011")
                
                if cmd.dt == "S":
                    i.insert( 8,  8, "1")
                    i.insert(24, 24, "0")
                else:
                    i.insert( 8,  8, "1")
                    i.insert(24, 24, "1")
                
            #------------------------------------------------------------------------------------------
            # VQSHLUI
            #------------------------------------------------------------------------------------------
            if cmd.v2rsacmd == "VQSHLUI":
                i.insert(11,  9, "011")
                
                if cmd.dt == "S":
                    i.insert( 8,  8, "0")
                    i.insert(24, 24, "1")
                else:
                    print
                    print "type " + cmd.dt + "is not allowed for " + cmd.v2rsacmd
                                
            #------------------------------------------------------------------------------------------
            # VSHLLI
            #------------------------------------------------------------------------------------------
            if cmd.v2rsacmd == "VSHLLI":
                i.insert(11,  8, "1001")
                i.insert( 6,  6, "0")
                i.insert( 7,  7, "0")
                
                if cmd.dt == "U":
                    i.insert(24, 24, "1")
                    
            #------------------------------------------------------------------------------------------
            # Vector transport commands
            #------------------------------------------------------------------------------------------
            if cmd.vtranscmd:
                i.insert(31, 26, "010111")    # vector opcode
                i.insert(25, 24, "01")        # vector transport
                
            if cmd.vtranscmd == "VMOV":
                i.insert(10,  8, "000")
                i.insertVD(self.tointeger(cmd.vdregister))
                i.insertVA(self.tointeger(cmd.aregister))
                i.insertVB(self.tointeger(cmd.index))
            
            if cmd.vtranscmd == "VMOVA":
                i.insert(10,  8, "100")
                i.insertVD(self.tointeger(cmd.vdregister))
                i.insertVA(self.tointeger(cmd.aregister))
                
                if cmd.reg_width:
                    if cmd.reg_width == "W":
                        i.insert( 6, 6, "1")
                    else:
                        i.insert( 6, 6, "0")
                else:
                    i.insert( 6, 6, "1")
                
            if cmd.vtranscmd == "VMOVS":
                i.insert(9,  8, "01")
                i.insertVD(self.tointeger(cmd.dregister))
                i.insertVA(self.tointeger(cmd.varegister))
                i.insertVB(self.tointeger(cmd.index))
                
            #------------------------------------------------------------------------------------------
            # VSHUF
            #------------------------------------------------------------------------------------------
            if cmd.vtranscmd == "VSHUF":
                i.insert(9, 8, "10")
                i.insertVD(self.tointeger(cmd.vdregister))
                i.insertVA(self.tointeger(cmd.varegister))
                
                i.insert( 6,  0, i.tobinary(self.tointeger(cmd.perm) >>  0).rjust(7,"0"))
                i.insert(23, 23, i.tobinary(self.tointeger(cmd.perm) >>  7).rjust(1,"0"))
                i.insert(11, 10, i.tobinary(self.tointeger(cmd.perm) >>  8).rjust(2,"0"))
                i.insert(16, 16, i.tobinary(self.tointeger(cmd.perm) >> 10).rjust(1,"0"))
                i.insert(12, 12, i.tobinary(self.tointeger(cmd.perm) >> 11).rjust(1,"0"))
                i.insert(21, 20, i.tobinary(self.tointeger(cmd.perm) >> 12).rjust(2,"0"))
                
            #------------------------------------------------------------------------------------------
            # Vector load-store commands
            #------------------------------------------------------------------------------------------ 
            if cmd.vldstcmd:
                i.insert(31, 26, "010111")    # vector opcode
                i.insert(25, 24, "00")        # vector ldst
                
                i.insertVD(self.tointeger(cmd.vdregister))
                i.insertVA(self.tointeger(cmd.aregister))
                i.insertVB(immediate)
                
                if cmd.sign:
                    if cmd.sign == "+":
                        i.insert( 9,  9, "1")
                    else:
                        i.insert( 9,  9, "0")
                else:
                    i.insert( 9,  9, "1")
                
                if cmd.reg_width:
                    if cmd.reg_width == "W":
                        i.insert( 6, 6, "1")
                    else:
                        i.insert( 6, 6, "0")
                else:
                    i.insert( 6, 6, "1")
                    
                if cmd.writeback:
                    i.insert( 4,  4, "1")
                else:
                    i.insert( 4,  4, "0")
            
            #------------------------------------------------------------------------------------------
            # VLDR
            #------------------------------------------------------------------------------------------    
            if cmd.vldstcmd == "VLDR":
                i.insert(8,  8, "1")

            #------------------------------------------------------------------------------------------
            # VSTR
            #------------------------------------------------------------------------------------------
            if cmd.vldstcmd == "VSTR":
                i.insert(8,  8, "0")
            
                   
            code [addr] = (i.tostring(), string.join(cmd))

        if errorcounter > 0:
            print 
            print str(errorcounter) + " error(s) found => output has not been written"
            sys.exit(1)
        else:
            return code, symbols

#------------------------------------------------------------------------------------------------------
# CLASS LINEPARSER
#------------------------------------------------------------------------------------------------------    
class LineParser:
    def parseLine(self,line):
        
        expression = Forward()
        
        dec_value = Word("0123456789", min=1)
        hex_value = Word("$","ABCDEF0123456789", min=2)
        bin_value = Word("%","10", min=2)
        
        value     = (dec_value ^ hex_value ^ bin_value).setResultsName("value")
        ident     = Word(alphas, alphanums + "_" ).setResultsName("symbol")
              
        immediate = (value ^ ident).setResultsName("immediate")
        label     = (ident + ":").setResultsName("label")
        
        perm = Word("10", min=14, max=14).setResultsName("perm")
        
        comment   = ( ";" + restOfLine).setResultsName("comment")
                
        dregister = Word("R","0123456789",min=2).setResultsName("dregister")
        aregister = Word("R","0123456789",min=2).setResultsName("aregister")
        bregister = Word("R","0123456789",min=2).setResultsName("bregister")
        
        vdregister = Word("V","0123456789",min=2).setResultsName("vdregister")
        varegister = Word("V","0123456789",min=2).setResultsName("varegister")
        vbregister = Word("V","0123456789",min=2).setResultsName("vbregister")
        
        reg_width_ext = (Literal("W") ^ Literal("N")).setResultsName("reg_width")
        reg_width     = ("." + reg_width_ext)
        
        dt_ext = (Literal("I") ^ Literal("U") ^ Literal("S")).setResultsName("dt")
        size   = (Literal("8") ^ Literal("16") ^ Literal("32")).setResultsName("size")
        dt     = "." + dt_ext + size
        
        sign   = (Literal("+") ^ Literal("-")).setResultsName("sign")
        wb     = (Literal("!")).setResultsName("writeback")
        
        
        directive_cmd_keyword_1 = (Keyword("ORG") ^ Keyword("DC")).setResultsName("dcommand")
        directive_cmd_keyword_2 = (Keyword("EQU")).setResultsName("equ_command")
        directive_cmd_keyword_3 = (Keyword("ALIGN_64") ^ Keyword("ALIGN_128")).setResultsName("align_command")
        
        directive_cmd_1 = directive_cmd_keyword_1 + value.setResultsName("address")
        equ_cmd         = directive_cmd_keyword_2 + ident + value
        align_cmd       = directive_cmd_keyword_3
         
        directive_cmd = (directive_cmd_1)

        #----------------------------------------------------------------------------------------------
        # ALU Type: OC Rd, Ra
        #----------------------------------------------------------------------------------------------
        alu_cmd_keyword_1 = (Keyword("SRA") ^ Keyword("SRC") ^ Keyword("SRL") ^ Keyword("SEXT8") ^ Keyword("SEXT16")).setResultsName("command")
                 
        #----------------------------------------------------------------------------------------------
        # ALU Type: OC Rd, Ra, Rb
        #----------------------------------------------------------------------------------------------
        alu_cmd_keyword_2 = (Keyword("ADD") ^ Keyword("RSUB") ^ Keyword("SUB") ^ Keyword("ADDC") ^ Keyword("RSUBC") ^ Keyword("ADDK") \
                            ^ Keyword("RSUBK") ^ Keyword("ADDKC") ^ Keyword("RSUBKC") ^ Keyword("CMP") ^ Keyword("CMPU") ^ Keyword("MUL") \
                            ^ Keyword("BSRA") ^ Keyword("BSLL") ^ Keyword("OR") ^ Keyword("AND") ^ Keyword("XOR") ^ Keyword("ANDN")).setResultsName("command")

        #----------------------------------------------------------------------------------------------
        # ALU Type: OC Rd, Ra, Imm
        #----------------------------------------------------------------------------------------------
        alu_cmd_keyword_3 = (Keyword("ADDI") ^ Keyword("RSUBI") ^ Keyword("ADDIC") ^ Keyword("RSUBIC") ^ Keyword("ADDIK") \
                            ^ Keyword("RSUBIK") ^ Keyword("ADDIKC") ^ Keyword("RSUBIKC") ^ Keyword("MULI") ^ Keyword("BSRLI") \
                            ^ Keyword("BSRAI") ^ Keyword("BSLLI") ^ Keyword("ORI") ^ Keyword("ANDI") ^ Keyword("XORI") ^ Keyword("ANDNI")).setResultsName("command")
        
        alu_cmd_1 = alu_cmd_keyword_1 + dregister + "," + aregister
        alu_cmd_2 = alu_cmd_keyword_2 + dregister + "," + aregister + "," + bregister
        alu_cmd_3 = alu_cmd_keyword_3 + dregister + "," + aregister + "," + immediate
        alu_cmd   = (alu_cmd_1 ^ alu_cmd_2 ^ alu_cmd_3)

        #----------------------------------------------------------------------------------------------
        # JMP Type: OC Rb
        #----------------------------------------------------------------------------------------------
        jmp_cmd_keyword_1 = (Keyword("BR") ^ Keyword("BRD") ^ Keyword("BRA") ^ Keyword("BRAD")).setResultsName("command")
        
        #----------------------------------------------------------------------------------------------
        # JMP Type: OC Rd, Rb
        #----------------------------------------------------------------------------------------------
        jmp_cmd_keyword_2 = (Keyword("BRLD") ^ Keyword("BRALD") ^ Keyword("BRK") ^ Keyword("BRAD")).setResultsName("command")
        
        #----------------------------------------------------------------------------------------------
        # JMP type: OC Ra, Rb
        #----------------------------------------------------------------------------------------------
        jmp_cmd_keyword_3 = (Keyword("BEQ") ^ Keyword("BNE") ^ Keyword("BLT") ^ Keyword("BLE") \
                             ^ Keyword("BGT") ^ Keyword("BGE") ^ Keyword("BEQD") ^ Keyword("BNED") \
                             ^ Keyword("BLDT") ^ Keyword("BLED") ^ Keyword("BGTD") ^ Keyword("BGED")).setResultsName("command")
        
        #----------------------------------------------------------------------------------------------
        # JMP type: OC Ra, Imm
        #----------------------------------------------------------------------------------------------
        jmp_cmd_keyword_4 = (Keyword("RTSD") ^ Keyword("RTID") ^ Keyword("RTBD") ^ Keyword("RTED") \
                             ^ Keyword("BEQI") ^ Keyword("BNEI") ^ Keyword("BLTI") ^ Keyword("BLEI") \
                             ^ Keyword("BGTI") ^ Keyword("BGEI") ^ Keyword("BEQID") ^ Keyword("BNEID") \
                             ^ Keyword("BLTID") ^ Keyword("BLEID") ^ Keyword("BGTID") ^ Keyword("BGEID")).setResultsName("command")
        
        #----------------------------------------------------------------------------------------------      
        # JMP type: OC Rd, Imm
        #----------------------------------------------------------------------------------------------
        jmp_cmd_keyword_5 = (Keyword("BRLID") ^ Keyword("BRALID") ^ Keyword("BRKI")).setResultsName("command")
        
        #----------------------------------------------------------------------------------------------
        # JMP type: OC Imm
        #----------------------------------------------------------------------------------------------
        jmp_cmd_keyword_6 = (Keyword("BRI") ^ Keyword("BRID") ^ Keyword("BRAI") ^ Keyword("BRAID") ).setResultsName("command")        
                            
        jmp_cmd_1 = jmp_cmd_keyword_1 + bregister
        jmp_cmd_2 = jmp_cmd_keyword_2 + dregister + "," + bregister
        jmp_cmd_3 = jmp_cmd_keyword_3 + aregister + "," + bregister
        jmp_cmd_4 = jmp_cmd_keyword_4 + aregister + "," + immediate
        jmp_cmd_5 = jmp_cmd_keyword_5 + dregister + "," + immediate     
        jmp_cmd_6 = jmp_cmd_keyword_6 + immediate          
        
        jmp_cmd   = (jmp_cmd_1 ^ jmp_cmd_2 ^ jmp_cmd_3 ^ jmp_cmd_4 ^ jmp_cmd_5 ^ jmp_cmd_6)
        
        imm_cmd_keyword = (Keyword("IMM")).setResultsName("command")
        imm_cmd         = imm_cmd_keyword + immediate
        
        inherent_cmd_keyword = (Keyword("NOP")).setResultsName("command")                            
        inherent_cmd         = inherent_cmd_keyword
        
        #----------------------------------------------------------------------------------------------
        # Load type: OC Rd, Ra, Rb
        #----------------------------------------------------------------------------------------------
        load_cmd_keyword_1  = (Keyword("LBU") ^ Keyword("LBUR") ^ Keyword("LHU") ^ Keyword("LHUR") ^ Keyword("LW") ^ Keyword("LWR")).setResultsName("command")
        
        #----------------------------------------------------------------------------------------------
        # Load type: OC Rd, Ra, Imm
        #----------------------------------------------------------------------------------------------
        load_cmd_keyword_2  = (Keyword("LBUI") ^ Keyword("LHUI") ^ Keyword("LWI")).setResultsName("command")
        
        load_cmd_1          = load_cmd_keyword_1 + dregister + "," + Optional("[") + aregister + "+" + bregister + Optional("]")
        load_cmd_2          = load_cmd_keyword_1 + dregister + "," + aregister + "," + bregister
        
        load_cmd_3          = load_cmd_keyword_2 + dregister + "," + Optional("[") + aregister + "+" + immediate + Optional("]")
        load_cmd_4          = load_cmd_keyword_2 + dregister + "," + aregister + "," + immediate
        
        load_cmd            = (load_cmd_1 ^ load_cmd_2 ^ load_cmd_3 ^ load_cmd_4)

        #----------------------------------------------------------------------------------------------
        # Load type: OC Rd, Ra, Rb
        #----------------------------------------------------------------------------------------------
        store_cmd_keyword_1 = (Keyword("SB") ^ Keyword("SBR") ^ Keyword("SH") ^ Keyword("SHR") ^ Keyword("SW") ^ Keyword("SWR")).setResultsName("command")
        
        #----------------------------------------------------------------------------------------------
        # Load type: OC Rd, Ra, Imm
        #----------------------------------------------------------------------------------------------
        store_cmd_keyword_2  = (Keyword("SBI") ^ Keyword("SHI") ^ Keyword("SWI")).setResultsName("command")
        
        store_cmd_1          = store_cmd_keyword_1 + dregister + "," + Optional("[") + aregister + "+" + bregister + Optional("]")
        store_cmd_2          = store_cmd_keyword_1 + dregister + "," + aregister + "," + bregister
        
        store_cmd_3          = store_cmd_keyword_2 + dregister + "," + Optional("[") + aregister + "+" + immediate + Optional("]")
        store_cmd_4          = store_cmd_keyword_2 + dregister + "," + aregister + "," + immediate
        
        store_cmd            = (store_cmd_1 ^ store_cmd_2 ^ store_cmd_3 ^ store_cmd_4)
        
        mst_cmd_keyword      = (Keyword("MSRSET") ^ Keyword("MSRCLR")).setResultsName("command")
        mst_cmd              = mst_cmd_keyword + dregister + "," + immediate
        
        scalar_command = (alu_cmd ^ jmp_cmd ^ inherent_cmd ^ load_cmd ^ store_cmd ^ imm_cmd ^ mst_cmd)
        basic_command  = (directive_cmd ^ scalar_command)
        
        #----------------------------------------------------------------------------------------------
        # Vector ALU command
        #----------------------------------------------------------------------------------------------
        v3rsl_cmd_keyword_1 = (Keyword("VADD") ^ Keyword("VSUB") ^ Keyword("VAND") ^ Keyword("VOR") ^ Keyword("VANDN") ^ Keyword("VBIC") \
                               ^ Keyword("VOR") ^ Keyword("VBSL") ^ Keyword("VBIT") ^ Keyword("VBIF") ^ Keyword("VORN") ^ Keyword("VXOR") \
                               ^ Keyword("VQADD") ^ Keyword("VQSUB") ^ Keyword("VSHL") ^ Keyword("VQSHL") ^ Keyword("VMUL") ^ Keyword("VMADD") \
                               ^ Keyword("VMSUB")).setResultsName("v3rslcmd")
        
        v3rsl_cmd_keyword_2 = (Keyword("VPADD")).setResultsName("vcommand")
        
        v3rsl_cmd_1         = v3rsl_cmd_keyword_1 + Optional(reg_width) + Optional(dt) + vdregister + "," + varegister + "," + vbregister
        v3rsl_cmd_2         = v3rsl_cmd_keyword_2 +  vdregister + "," + varegister + "," + vbregister   
        v3rsl_cmd           = (v3rsl_cmd_1 ^ v3rsl_cmd_2)
        
        v3rdl_cmd_keyword_1 = (Keyword("VADDL") ^ Keyword("VADDW") ^ Keyword("VSUBL") ^ Keyword("VSUBW") ^ Keyword("VADDHN") \
                               ^ Keyword("VSUBHN") ^ Keyword("VMULL") ^ Keyword("VMADDL") ^ Keyword("VMSUBL")).setResultsName("v3rdlcmd")
                               
        v3rdl_cmd_1         = v3rdl_cmd_keyword_1 + Optional(reg_width) + dt + vdregister + "," + varegister + "," + vbregister
        v3rdl_cmd           = (v3rdl_cmd_1)
        
        v2rsa_cmd_keyword_1 = (Keyword("VSHLI") ^ Keyword("VQSHLI") ^ Keyword("VQSHLUI") ^ Keyword("VSHLLI") \
                               ^ Keyword("VSHRI") ^ Keyword("VSHRNI") ^ Keyword("VQSHRNI") ^ Keyword("VQSHRNUI")).setResultsName("v2rsacmd")
        
        v2rsa_cmd_1         = v2rsa_cmd_keyword_1 + Optional(reg_width) + dt + vdregister + "," + vbregister + immediate
        v2rsa_cmd           = (v2rsa_cmd_1)
        
        #----------------------------------------------------------------------------------------------
        # Vector transfer command TODO: use register names (reg vs. vreg) to separate
        #----------------------------------------------------------------------------------------------
        index                 = (immediate).setResultsName("index")
        vtrans_cmd_keyword_1  = (Keyword("VMOV")).setResultsName("vtranscmd")
        vtrans_cmd_keyword_2  = (Keyword("VMOVS")).setResultsName("vtranscmd")
        vtrans_cmd_keyword_3  = (Keyword("VMOVA")).setResultsName("vtranscmd")
        
        vtrans_cmd_1          = vtrans_cmd_keyword_1 + vdregister + "(" + index + ")" + "," + aregister
        vtrans_cmd_2          = vtrans_cmd_keyword_2 + dregister + "," + varegister + "(" + index + ")"
        vtrans_cmd_3          = vtrans_cmd_keyword_3 + Optional(reg_width) + vdregister + "," + aregister

        vtrans_cmd            = (vtrans_cmd_1 ^ vtrans_cmd_2 ^ vtrans_cmd_3)

        #----------------------------------------------------------------------------------------------
        # Vector load store commands
        #----------------------------------------------------------------------------------------------     
        vldst_cmd_keyword_1 = (Keyword("VSTR") ^ Keyword("VLDR")).setResultsName("vldstcmd")

        vldst_cmd_1          = vldst_cmd_keyword_1 + Optional(reg_width) + vdregister + "," + Optional("[") + aregister + sign + immediate + Optional("]") + Optional(wb)
        vldst_cmd_2          = vldst_cmd_keyword_1 + Optional(reg_width) + vdregister + "," + aregister + "," + Optional(sign) + immediate + Optional(wb)
        
        #vldst_cmd_3          = vldst_cmd_keyword_1 + Optional(reg_width) + vdregister + "," + Optional("[") + aregister + sign + bregister + Optional("]") + Optional(wb)
        #vldst_cmd_4          = vldst_cmd_keyword_1 + Optional(reg_width) + vdregister + "," + aregister + "," + Optional(sign) + bregister + Optional(wb)       
        
        vldst_cmd            = (vldst_cmd_1 ^ vldst_cmd_2)
        
        #----------------------------------------------------------------------------------------------
        # Vector shuffle
        #----------------------------------------------------------------------------------------------
        shuffle_cmd_keyword = Keyword("VSHUF").setResultsName("vtranscmd")
        shuffle_cmd = shuffle_cmd_keyword + vdregister + "," + varegister + "," + perm
        
        
        vector_command        = (v3rsl_cmd ^ v3rdl_cmd ^ v2rsa_cmd ^ vtrans_cmd ^ vldst_cmd ^ shuffle_cmd)
        
        #----------------------------------------------------------------------------------------------
        # putting it all together
        #----------------------------------------------------------------------------------------------
        command            = (basic_command ^ equ_cmd ^ align_cmd ^ vector_command)
        
        expression << (Optional((Optional(label) + command)) + Optional(comment) + lineEnd)
        result = expression.parseString(line)
        return result

#------------------------------------------------------------------------------------------------------
# CLASS SETTINGS
#------------------------------------------------------------------------------------------------------            
class Settings(object):
    def getN(self):
        return 16
    
    def getK(self):
        return 16

    def getR(self):
        return 32
        
    def getW(self):
        return 32        # currently we count from 0 to 32 for W and N!
        
    def getN(self):
        return 32

#------------------------------------------------------------------------------------------------------
# MAIN PROGRAM
#------------------------------------------------------------------------------------------------------        
if __name__ == '__main__':
    Assembler(sys.argv)       

    
